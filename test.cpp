#ifndef AGACTIVITYGEN_H
#define AGACTIVITYGEN_H
#include <config.h>

#include "city/AGCity.h"

class OutputDevice;
class RONet;
class AGTrip;

class AGActivityGen
{
public:
    AGActivityGen(std::string input, OutputDevice &output, RONet *net) : inputFile(input),
                                                                         outputFile(output),
                                                                         net(net),
                                                                         //activities(),
                                                                         city(net){};
    void importInfoCity();
    void makeActivityTrips(int days = 1, int beginTime = 0, int endTime = 0);

protected:
    std::string inputFile;
    OutputDevice &outputFile;
    RONet *net;
    //Activities activities;
    AGCity city;
    int durationInDays, beginTime, endTime;
    /**
     * @brief validation: compatibility of the given trip
     *
     * @param[in] trip to be validated
     *
     * @returns whether the trip is compatible with the time boundaries or not.
     * for this begin, end and duration of the simulation must be defined
     */
    bool timeTripValidation(const AGTrip &trip) const;
    /**
     * @brief generate the output file (trips or routes) using a trip list
     *
     * @param[in] trips generated by the different activities
     */
    void generateOutputFile(std::list<AGTrip> &trips);
    /**
     * @breif introduce a slight variation into the departure time of "default" vehicles
     *
     * @param[in] trip on which a random (normally distributed) variation will be tried
     */
    void varDepTime(AGTrip &trip) const;

private:
    AGActivityGen &operator=(const AGActivityGen &);
};

#endif